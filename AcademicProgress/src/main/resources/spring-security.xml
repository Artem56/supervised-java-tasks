<?xml version= "1.0" encoding= "UTF-8"?>
<beans:beans xmlns:beans= "http://www.springframework.org/schema/beans"
             xmlns:xsi= "http://www.w3.org/2001/XMLSchema-instance"
             xmlns= "http://www.springframework.org/schema/security"
             xsi:schemaLocation= "http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- Позволяет создать форму регистрации по умолчанию,второй атрибут позволяет использовать
        выражения (например hasRole(‘ADMIN’)) -->
    <http auto-config= "true" use-expressions= "true"  >

        <!--задает паттерн по которому будет проверяться уровень доступа клиента. Например
        <intercept-url pattern= «/user/**» access= «hasRole(‘USER’)»/> будет показывать страницу по
        адресу URL, содержащему /user/**, только пользователям с ролью USER. Пример: если попытаться
        войти без логина на страницу http://localhost:8080/user/, то клиент будет переброшен на страницу,
        указанную в form-login login-page=’pageName.html’.-->
        <!-- TODO изменить паттерны, вероятно **/admin/** **/user/**. Хотя, вероятно у одного из них должен
             TODO быть "пустой паттерн, типа админ может заходить везде)"-->
        <intercept-url pattern= "/security/**" access= "hasRole('ADMIN')"/>
        <intercept-url pattern= "/user/**" access= "hasRole('USER')"/>

        <!-- задает различные настройки страницы авторизации (формы). username-parameter и
        password-parameter — параметры, которые используются для связывания с именем пользователя и паролем,
        которые были введены пользователем в форму. login-processing-url — задает значение action у form при
        котором Spring Security понимает, что нужно проверять пользователя согласно настройкам. -->
        <form-login login-page= "/login.html"
                    username-parameter= "j_username"
                    password-parameter= "j_password"
                    login-processing-url= "/j_spring_security_check"
                    authentication-failure-url= "/login.html?error=true" />

        <logout logout-url= "/j_spring_security_logout" logout-success-url= "/"/>
        <!--создает чекбокс «запомни меня». Далее указано время жизни. Запоминание происходит путем
        использования cookie с именем, указанным в key (myKey). -->
        <remember-me key= "myKey" token-validity-seconds= "300"/>

        <csrf disabled= "true"/>

    </http>

    <!-- Далее идет настройка проверки пользователей с помощью запроса к базе данных. Мы используем источник
    данных ‘dataSource‘, который задан в application-context.xml еще в части, где рассматривалась работа с
    БД (JDBC). Затем мы записываем в прямую запрос SQL, который будет выполнен для проверки пользователя.
    authentication-manager и authentication-provider можно настроить различными способами, здесь просто
    указывается алиас и сервис для проверки аутентификации (jdbc-user-service, описанный чуть выше).
    TODO естественно переделать-->
    <jdbc-user-service id= "jdbcUserService" data-source-ref= "dataSource"
                       users-by-username-query= "SELECT USERNAME, PASSWORD, ENABLED FROM USER WHERE USERNAME=?"
                       authorities-by-username-query= "SELECT U.USERNAME, A.AUTHORITY
        	 FROM AUTHORITIES A, USER U WHERE U.USERNAME = A.USERNAME AND U.USERNAME = ? "/>

    <authentication-manager alias= "authenticationManager">
        <authentication-provider user-service-ref= "jdbcUserService"/>
    </authentication-manager>


</beans:beans>